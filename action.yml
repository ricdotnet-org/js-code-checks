name: 'Run JS Code Checks'
description: 'Runs eslint and tests if available'

inputs:
  linting:
    description: 'Should run linting'
    required: false
    default: false
  tests:
    description: 'Should run tests'
    required: false
    default: false
  package-manager:
    descriprion: 'Can only be npm or yarn'
    required: false
    default: 'yarn'
  node-version:
    descriprion: 'Node version'
    required: false
    default: '22'

runs:
  using: "composite"

  linting-and-style-checks:
    if: ${{ inputs.linting == true }}
    name: Linting and code style checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          #   token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
  
      - name: Prepare yarn
        if: ${{ inputs.package-manager == 'yarn' }}
        shell: bash
        run: corepack enable
  
      - name: Install dependencies
        shell: bash
        run: |
          if [[ $PACKAGE_MANAGER == "yarn" ]]; then
            yarn install
          else
            npm install
          fi
        env:
          PACKAGE_MANAGER: ${{ inputs.package-manager }}
  
      - name: Run biome checks
        shell: bash
        run: yarn biome

  tests:
    if: ${{ inputs.tests == true }}
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
          #   token: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
  
      - name: Prepare yarn
        if: ${{ inputs.package-manager == 'yarn' }}
        shell: bash
        run: corepack enable
  
      - name: Install dependencies
        shell: bash
        run: |
          if [[ $PACKAGE_MANAGER == "yarn" ]]; then
            yarn install
          else
            npm install
          fi
        env:
          PACKAGE_MANAGER: ${{ inputs.package-manager }}

      - name: Run tests
        shell: bash
        run: |
          if [[ $PACKAGE_MANAGER == "yarn" ]]; then
            yarn test
          else
            npm run test
          fi
        env:
          PACKAGE_MANAGER: ${{ inputs.package-manager }}
